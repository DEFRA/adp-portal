app:
  # Should be the same as backend.baseUrl when using the `app-backend` plugin.
  baseUrl: ${APP_BASE_URL}

kubernetes:
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'config'
      clusters:
        - name: ${SND1_CLUSTER_NAME}
          url: ${SND1_CLUSTER_API_SERVER_ADDRESS}
          authProvider: azure
          skipTLSVerify: true
          skipMetricsLookup: true
        - name: ${SND2_CLUSTER_NAME}
          url: ${SND2_CLUSTER_API_SERVER_ADDRESS}
          authProvider: azure
          skipTLSVerify: true
          skipMetricsLookup: true
        - name: ${SND3_CLUSTER_NAME}
          url: ${SND3_CLUSTER_API_SERVER_ADDRESS}
          authProvider: azure
          skipTLSVerify: true
          skipMetricsLookup: true
        # - name: ${DEV1_CLUSTER_NAME}
        #   url: ${DEV1_CLUSTER_API_SERVER_ADDRESS}
        #   authProvider: azure
        #   skipTLSVerify: true
        #   skipMetricsLookup: true
        # - name: ${TST1_CLUSTER_NAME}
        #   url: ${TST1_CLUSTER_API_SERVER_ADDRESS}
        #   authProvider: azure
        #   skipTLSVerify: true
        #   skipMetricsLookup: true
        # - name: ${TST2_CLUSTER_NAME}
        #   url: ${TST2_CLUSTER_API_SERVER_ADDRESS}
        #   authProvider: azure
        #   skipTLSVerify: true
        #   skipMetricsLookup: true        
        # - name: ${PRE1_CLUSTER_NAME}
        #   url: ${PRE1_CLUSTER_API_SERVER_ADDRESS}
        #   authProvider: azure
        #   skipTLSVerify: true
        #   skipMetricsLookup: true
        # - name: ${PRD1_CLUSTER_NAME}
        #   url: ${PRD1_CLUSTER_API_SERVER_ADDRESS}
        #   authProvider: azure
        #   skipTLSVerify: true
        #   skipMetricsLookup: true          

integrations:
  azure:
    - host: dev.azure.com
      credentials:
        - organizations:
            - defragovuk
          personalAccessToken: ${ADO_PAT}
        - clientId: ${AUTH_MICROSOFT_CLIENT_ID}
          clientSecret: ${AUTH_MICROSOFT_CLIENT_SECRET}
          tenantId: ${AUTH_MICROSOFT_TENANT_ID}
  github:
    - host: github.com
      apps:
        - $include: github-app-configuration.yaml

backend:
  auth:
    keys:
      - secret: ${BACKSTAGE_BACKEND_SECRET}
  # Note that the baseUrl should be the URL that the browser and other clients
  # should use when communicating with the backend, i.e. it needs to be
  # reachable not just from within the backend host, but from all of your
  # callers. When its value is "http://localhost:7007", it's strictly private
  # and can't be reached by others.
  baseUrl: ${APP_BACKEND_BASE_URL}
  # The listener can also be expressed as a single <host>:<port> string. In this case we bind to
  # all interfaces, the most permissive setting. The right value depends on your specific deployment.
  listen: ':7007'

  # config options: https://node-postgres.com/api/client
  database:
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
      ssl:
        require: true
        rejectUnauthorized: true
      # https://node-postgres.com/features/ssl
      # you can set the sslmode configuration option via the `PGSSLMODE` environment variable
      # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
      # ssl:
      #   ca: # if you have a CA file and want to verify it you can uncomment this section
      #     $file: <file-path>/ca/server.crt

catalog:
  providers:
    microsoftGraphOrg:
      default:
        tenantId: ${AUTH_MICROSOFT_TENANT_ID}
        clientId: ${AUTH_MICROSOFT_CLIENT_ID}
        clientSecret: ${AUTH_MICROSOFT_CLIENT_SECRET}
        userGroupMember:
          filter: "displayName eq '${ADP_PORTAL_PLATFORM_ADMINS_GROUP}' or displayName eq '${ADP_PORTAL_PROGRAMME_ADMINS_GROUP}'"
        group:
          filter: "displayName eq '${ADP_PORTAL_PLATFORM_ADMINS_GROUP}' or displayName eq '${ADP_PORTAL_PROGRAMME_ADMINS_GROUP}'"
        schedule:
          frequency: { minutes: 60 }
          timeout: { minutes: 10 }

    github:
      defraMaster:
        organization: 'defra'
        catalogPath: '/catalog-info.yaml'
        filters:
          repository: '^(ffc-.+|fcp-.+)'
        schedule:
          frequency: { minutes: 60 }
          timeout: { minutes: 5 }
      # defraMain:
      #   organization: 'defra'
      #   catalogPath: '/catalog-info.yaml'
      #   filters:
      #     branch: 'main'
      #     repository: '^(ffc-.+|fcp-.+)'
      #   schedule:
      #     frequency: { minutes: 60 }
      #     timeout: { minutes: 5 }
          
proxy:
  '/grafana/api':
    target: ${GRAFANA_ENDPOINT}
    headers:
      Authorization: Bearer ${GRAFANA_TOKEN}

grafana:
  domain: ${GRAFANA_ENDPOINT}

techdocs:
  builder: 'external'
  generator:
    runIn: 'local'
    mkdocs:
      omitTechdocsCorePlugin: false
      defaultPlugins: ['techdocs-core']
  publisher:
    type: 'azureBlobStorage'
    azureBlobStorage:
      containerName: 'adp-wiki-techdocs'
      credentials:
        accountName: ${TECHDOCS_AZURE_BLOB_STORAGE_ACCOUNT_NAME}
        accountKey: ${TECHDOCS_AZURE_BLOB_STORAGE_ACCOUNT_KEY}
