kubernetes:
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - $include: ./config/clusterLocator.${BACKSTAGE_ENVIRONMENT}.configuration.yaml

integrations:
  azure:
    - host: dev.azure.com
      credentials:
        - organizations:
            - defragovuk
          personalAccessToken: ${ADO_PAT}
        - clientId: ${AUTH_MICROSOFT_CLIENT_ID}
          clientSecret: ${AUTH_MICROSOFT_CLIENT_SECRET}
          tenantId: ${AUTH_MICROSOFT_TENANT_ID}
  github:
    - host: github.com
      apps:
        - $include: github-app-configuration.yaml

backend:
  auth:
    keys:
      - secret: ${BACKSTAGE_BACKEND_SECRET}

  # config options: https://node-postgres.com/api/client
  database:
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
      ssl:
        require: true
        rejectUnauthorized: true
      # https://node-postgres.com/features/ssl
      # you can set the sslmode configuration option via the `PGSSLMODE` environment variable
      # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
      # ssl:
      #   ca: # if you have a CA file and want to verify it you can uncomment this section
      #     $file: <file-path>/ca/server.crt

catalog:
  providers:
    microsoftGraphOrg:
      default:
        tenantId: ${AUTH_MICROSOFT_TENANT_ID}
        clientId: ${AUTH_MICROSOFT_CLIENT_ID}
        clientSecret: ${AUTH_MICROSOFT_CLIENT_SECRET}
        userGroupMember:
          filter: "displayName eq '${ADP_PORTAL_PLATFORM_ADMINS_GROUP}' or startsWith(displayName, '${ADP_PORTAL_USERS_GROUP_PREFIX}')"
        group:
          filter: "displayName eq '${ADP_PORTAL_PLATFORM_ADMINS_GROUP}' or startsWith(displayName, '${ADP_PORTAL_USERS_GROUP_PREFIX}')"
        schedule:
          frequency: { hours: 0, minutes: 10 }
          timeout: { minutes: 10 }

    github:
      defra:
        organization: ${GITHUB_ORGANIZATION}
        catalogPath: '/catalog-info.yaml'
        schedule:
          frequency: { minutes: 60 }
          timeout: { minutes: 5 }

proxy:
  endpoints:
    '/grafana/api':
      target: ${GRAFANA_ENDPOINT}
      headers:
        Authorization: Bearer ${GRAFANA_TOKEN}

grafana:
  domain: ${GRAFANA_ENDPOINT}

techdocs:
  builder: 'external'
  generator:
    runIn: 'local'
    mkdocs:
      omitTechdocsCorePlugin: false
      defaultPlugins: ['techdocs-core']
  publisher:
    type: 'azureBlobStorage'
    azureBlobStorage:
      containerName: 'adp-wiki-techdocs'
      credentials:
        accountName: ${TECHDOCS_AZURE_BLOB_STORAGE_ACCOUNT_NAME}
        accountKey: ${TECHDOCS_AZURE_BLOB_STORAGE_ACCOUNT_KEY}
